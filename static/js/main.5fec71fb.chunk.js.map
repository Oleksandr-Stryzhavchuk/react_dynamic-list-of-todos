{"version":3,"sources":["components/TodoFilter/TodoFilter.tsx","components/TodoList/TodoList.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","api.ts","App.tsx","index.tsx"],"names":["TodoFilter","selectedOption","onSelect","query","onSearch","className","value","onChange","event","target","type","placeholder","style","pointerEvents","onClick","TodoList","allTodos","onButtonClick","selectedTodo","map","todo","classNames","id","completed","title","Loader","TodoModal","user","onCrossClick","href","email","name","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","App","useState","setTodos","selectedUser","setSelectedUser","isTodosLoaded","setIsTodosLoaded","setSelectedTodo","isButtonClicked","setIsButtonClicked","setSelectedOption","setQuery","useEffect","visTodos","filterBySelect","useCallback","todosFromServer","option","filter","filterByQuery","inputQuery","normQuery","toLocaleLowerCase","includes","visibleTodos","useMemo","onInfoButtonClick","userId","onCrossButtonClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5fec71fb.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  selectedOption: string,\n  onSelect: (option: string) => void,\n  query: string,\n  onSearch: (str: string) => void,\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  selectedOption,\n  onSelect,\n  query,\n  onSearch,\n}) => {\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    onSelect(event.target.value);\n  };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onSearch(event.target.value);\n  };\n\n  const handleClear = () => {\n    onSearch('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedOption}\n            onChange={handleSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClear}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n// import { getTodos, getUser } from '../../api';\n// import { Todo } from '../../types/Todo';\n// import { User } from '../../types/User';\n\ntype Props = {\n  allTodos: Todo[],\n  onButtonClick: (todo: Todo) => void,\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  allTodos,\n  onButtonClick,\n  selectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n      <tbody>\n        {allTodos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': selectedTodo === todo,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed === true && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-success': todo.completed === true,\n                'has-text-danger': todo.completed === false,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\" />\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onButtonClick(todo)}\n            >\n              <span className=\"icon\">\n                <i className={classNames(\n                  'far',\n                  {\n                    'fa-eye-slash': selectedTodo === todo,\n                    'fa-eye': selectedTodo !== todo,\n                  },\n                )}\n                />\n              </span>\n            </button>\n            {/* </td> */}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  user: User | null,\n  todo: Todo | null,\n  onCrossClick: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  user,\n  todo,\n  onCrossClick,\n}) => (\n  <div className=\"modal is-active\" data-cy=\"modal\">\n    <div className=\"modal-background\" />\n\n    {!user ? (\n      <Loader />\n    ) : (\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <div\n            className=\"modal-card-title has-text-weight-medium\"\n            data-cy=\"modal-header\"\n          >\n            {`Todo #${todo?.id}`}\n          </div>\n\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            type=\"button\"\n            className=\"delete\"\n            data-cy=\"modal-close\"\n            onClick={onCrossClick}\n          />\n        </header>\n\n        <div className=\"modal-card-body\">\n          <p className=\"block\" data-cy=\"modal-title\">\n            {todo?.title}\n          </p>\n\n          <p className=\"block\" data-cy=\"modal-user\">\n            {todo?.completed\n              ? <strong className=\"has-text-success\">Done</strong>\n              : <strong className=\"has-text-danger\">Planned</strong>}\n\n            {' by '}\n\n            <a href={`mailto:${user.email}`}>\n              {user.name}\n            </a>\n          </p>\n        </div>\n      </div>\n    )}\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nexport function wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport function get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\nexport const getUsers = () => get<User[]>('/users');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoList } from './components/TodoList';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nimport { getTodos, getUser } from './api';\n\nexport const App: React.FC = () => {\n  const [allTodos, setTodos] = useState<Todo[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isTodosLoaded, setIsTodosLoaded] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isButtonClicked, setIsButtonClicked] = useState(false);\n  const [selectedOption, setSelectedOption] = useState('all');\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    getTodos()\n      .then(visTodos => {\n        setTodos(visTodos);\n        setIsTodosLoaded(true);\n      });\n  }, []);\n\n  const filterBySelect = useCallback((todosFromServer: Todo[], option: string) => {\n    return todosFromServer.filter(todo => {\n      switch (option) {\n        case 'active':\n\n          return todo.completed === false;\n\n        case 'completed':\n          return todo.completed === true;\n\n        case 'all':\n        default:\n          return true;\n      }\n    });\n  }, []);\n\n  const filterByQuery = useCallback((visTodos: Todo[], inputQuery: string) => {\n    return visTodos.filter(todo => {\n      const normQuery = inputQuery.toLocaleLowerCase();\n\n      return todo.title.toLocaleLowerCase().includes(normQuery);\n    });\n  }, []);\n\n  let visibleTodos = useMemo(() => {\n    return filterBySelect(allTodos, selectedOption);\n  }, [allTodos, selectedOption]);\n\n  visibleTodos = useMemo(() => {\n    return filterByQuery(visibleTodos, query);\n  }, [visibleTodos, query]);\n\n  const onInfoButtonClick = useCallback((todo: Todo) => {\n    getUser(todo.userId)\n      .then(user => setSelectedUser(user));\n\n    setSelectedTodo(todo);\n    setIsButtonClicked(true);\n  }, []);\n\n  const onCrossButtonClick = useCallback(() => {\n    setSelectedUser(null);\n    setSelectedTodo(null);\n    setIsButtonClicked(false);\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <h1 className=\"title\">allTodos:</h1>\n\n        <div className=\"block\">\n          <TodoFilter\n            selectedOption={selectedOption}\n            onSelect={setSelectedOption}\n            query={query}\n            onSearch={setQuery}\n          />\n        </div>\n\n        <div className=\"block\">\n          {!isTodosLoaded\n            ? (<Loader />)\n            : (\n              <TodoList\n                allTodos={visibleTodos}\n                onButtonClick={onInfoButtonClick}\n                selectedTodo={selectedTodo}\n              />\n            )}\n        </div>\n      </div>\n      <div>\n        {isButtonClicked && (\n          <TodoModal\n            user={selectedUser}\n            todo={selectedTodo}\n            onCrossClick={onCrossButtonClick}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}